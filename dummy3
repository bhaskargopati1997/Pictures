import pytest
from unittest.mock import MagicMock, patch, mock_open
import boto3
import os
import json
from datetime import datetime
from zoneinfo import ZoneInfo

# Import the functions from your lambda_handler module
from src.lambda_handler import (
    load_yaml, 
    get_job_groups, 
    query_dynamo_db_job_status, 
    check_mandatory_jobs_success, 
    check_optional_jobs_status, 
    lambda_handler, 
    reschedule_lambda, 
    cleanup_cloudwatch_rule, 
    trigger_step_function
)

# Sample config data for testing
config_data = """
QA:
  JOB_GROUP_MANDATORY:
    IS_MANDATORY: true
    GROUP_1:
      DATASETS:
        enterprise_customer_account_relationships:
          ID: "1234567"
    GROUP_2:
      DATASETS:
        EC_CUST_ACCT_BC:
          ID: "8091010"
  JOB_GROUP_OPTIONAL:
    IS_MANDATORY: false
    CUT_OFF_TIME: "12:00:00ZUTC"
    GROUP_3:
      DATASETS:
        Card_Product_Registry_OneLake:
          ID: "10001"
    GROUP_4:
      DATASETS:
        Dapp_Batch:
          ID: "90011"
"""

@patch('builtins.open', new_callable=mock_open, read_data=config_data)
def test_load_yaml(mock_file):
    config_data = load_yaml("dummy_path")
    assert "QA" in config_data
    assert "JOB_GROUP_MANDATORY" in config_data["QA"]
    assert "GROUP_1" in config_data["QA"]["JOB_GROUP_MANDATORY"]

@patch('builtins.open', new_callable=mock_open, read_data=config_data)
def test_get_job_groups(mock_file):
    config_data = load_yaml("dummy_path")
    mandatory, optional, cut_off_time = get_job_groups(config_data)
    assert mandatory == ["GROUP_1", "GROUP_2"]
    assert optional == {"GROUP_3": "12:00:00ZUTC", "GROUP_4": "12:00:00ZUTC"}
    assert cut_off_time == "12:00:00ZUTC"

# Additional tests for edge cases in get_job_groups
@patch('builtins.open', new_callable=mock_open, read_data=config_data)
def test_get_job_groups_empty_config(mock_file):
    config_data = {}
    mock_file.return_value = config_data
    
    mandatory, optional, cut_off_time = get_job_groups(config_data)
    
    assert mandatory == []
    assert optional == {}
    assert cut_off_time == ''

@patch('builtins.open', new_callable=mock_open, read_data=config_data)
def test_get_job_groups_no_mandatory_or_optional(mock_file):
    config_data = {"QA": {}}
    mock_file.return_value = config_data
    
    mandatory, optional, cut_off_time = get_job_groups(config_data)
    
    assert mandatory == []
    assert optional == {}
    assert cut_off_time == ''

@patch('boto3.resource')
def test_query_dynamo_db_job_status(mock_boto_resource):
    dynamodb_mock = mock_boto_resource.return_value
    table_mock = dynamodb_mock.Table.return_value
    table_mock.query.return_value = {
        'Items': [{'job_id': 'GROUP_1|2024-08-09', 'job_status': 'SUCCEEDED'}]
    }

    table_name = "batch_job_status"
    job_id = "GROUP_1|2024-08-09"
    response = query_dynamo_db_job_status(table_name, job_id)

    assert len(response['Items']) == 1
    assert response['Items'][0]['job_status'] == 'SUCCEEDED'

@patch('src.lambda_handler.query_dynamo_db_job_status')
def test_check_mandatory_jobs_success(mock_query):
    mock_query.return_value = {
        'Items': [{'job_id': 'GROUP_1|2024-08-09', 'job_status': 'SUCCEEDED'}]
    }
    mandatory_job_groups = ["GROUP_1", "GROUP_2"]
    all_successful, responses, failed_jobs, yet_to_trigger_jobs = check_mandatory_jobs_success(mandatory_job_groups)

    assert all_successful is True
    assert len(failed_jobs) == 0
    assert len(yet_to_trigger_jobs) == 0

# Additional test for no items returned
@patch('src.lambda_handler.query_dynamo_db_job_status')
def test_check_mandatory_jobs_no_items(mock_query):
    mock_query.return_value = {'Items': []}
    
    mandatory_job_groups = ["GROUP_1"]
    all_successful, responses, failed_jobs, yet_to_trigger_jobs = check_mandatory_jobs_success(mandatory_job_groups)
    
    assert all_successful == False
    assert len(failed_jobs) == 1
    assert yet_to_trigger_jobs == ["GROUP_1"]

@patch('src.lambda_handler.query_dynamo_db_job_status')
def test_check_optional_jobs_status(mock_query):
    mock_query.return_value = {
        'Items': [{'job_id': 'GROUP_3|2024-08-09', 'job_status': 'SUCCEEDED'}]
    }
    optional_job_groups = {"GROUP_3": "12:00:00ZUTC", "GROUP_4": "12:00:00ZUTC"}
    all_successful, responses, failed_jobs, yet_to_trigger_jobs = check_optional_jobs_status(optional_job_groups)

    assert all_successful is True
    assert len(failed_jobs) == 0
    assert len(yet_to_trigger_jobs) == 0

@patch('src.lambda_handler.query_dynamo_db_job_status')
def test_check_optional_jobs_mixed_status(mock_query):
    mock_query.side_effect = [
        {'Items': [{'job_status': 'SUCCEEDED'}]},
        {'Items': [{'job_status': 'FAILED'}]},
    ]
    optional_jobs = {"group3": "ZUTC12:00:00", "group4": "ZUTC12:00:00"}
    all_successful, responses, failed, yet_to_trigger = check_optional_jobs_status(optional_jobs)

    assert all_successful is False
    assert len(failed) == 1  # One job failed
    assert len(yet_to_trigger) == 0

@patch('src.lambda_handler.boto3.client')
def test_trigger_step_function(mock_boto_client):
    client_mock = mock_boto_client.return_value
    client_mock.start_execution.return_value = {
        'executionArn': 'arn:aws:states:region:account-id:execution:state-machine-name:execution-id'
    }

    context = {}
    response = trigger_step_function(context)

    assert 'executionArn' in response

@patch('src.lambda_handler.boto3.client')
def test_trigger_step_function_failure(mock_boto_client):
    mock_step_functions = MagicMock()
    mock_boto_client.return_value = mock_step_functions
    mock_step_functions.start_execution.side_effect = Exception("Step Function failed")

    with pytest.raises(Exception):
        trigger_step_function({})

@patch('src.lambda_handler.query_dynamo_db_job_status')
@patch('src.lambda_handler.boto3.client')
def test_check_mandatory_jobs_mixed_status(mock_query):
    mock_query.side_effect = [
        {'Items': [{'job_status': 'SUCCEEDED'}]},
        {'Items': [{'job_status': 'FAILED'}]},
    ]
    mandatory_jobs = ["group1", "group2"]
    all_successful, responses, failed, yet_to_trigger = check_mandatory_jobs_success(mandatory_jobs)

    assert all_successful is False
    assert len(failed) == 1  # One job failed
    assert len(yet_to_trigger) == 0

@patch('src.lambda_handler.boto3.client')
def test_reschedule_lambda(mock_boto_client):
    cloudwatch_mock = mock_boto_client.return_value
    cloudwatch_mock.put_rule.assert_called_once()
    cloudwatch_mock.put_targets.assert_called_once()
    cloudwatch_mock.add_permission.assert_called_once()

@patch('src.lambda_handler.boto3.client')
def test_cleanup_cloudwatch_rule(mock_boto_client):
    mock_cloudwatch = MagicMock()
    mock_boto_client.return_value = mock_cloudwatch
    mock_cloudwatch.describe_rule.return_value = {'Name': 'RescheduleLambdaRule'}

    cleanup_cloudwatch_rule()

    mock_cloudwatch.remove_targets.assert_called_once_with(Rule='RescheduleLambdaRule', Ids=['1'])
    mock_cloudwatch.delete_rule.assert_called_once_with(Name='RescheduleLambdaRule')

@patch('src.lambda_handler.check_mandatory_jobs_success', return_value=(True, {}, [], []))
@patch('src.lambda_handler.check_optional_jobs_status', return_value=(True, {}, [], []))
@patch('src.lambda_handler.trigger_step_function')
@patch('src.lambda_handler.cleanup_cloudwatch_rule')
def test_lambda_handler_success(mock_cleanup, mock_trigger, mock_optional, mock_mandatory):
    context = MagicMock()
    context.invoked_function_arn = "arn:aws:lambda:region:account-id:function:function-name"

    response = lambda_handler(event, context)
    assert response['statusCode'] == 200
    assert response['body']['status'] == "completed"
